import { io, Socket } from "socket.io-client";

export class OrdersWebSocketClient {
  private socket: Socket | null = null;
  private isConnected = false;
  private newOrderAudio: HTMLAudioElement | null = null;
  private audioUnlocked = false;
  private audioContext: AudioContext | null = null;

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  private audioFormats = [
    { ext: "mp3", mime: "audio/mpeg", priority: 1 },
    { ext: "aac", mime: "audio/aac", priority: 2 },
    { ext: "wav", mime: "audio/wav", priority: 3 },
    { ext: "aiff", mime: "audio/aiff", priority: 4 },
    { ext: "wma", mime: "audio/x-ms-wma", priority: 5 },
  ];

  // Heartbeat –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private reconnectTimeout: NodeJS.Timeout | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 10;
  private baseReconnectDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
  private maxReconnectDelay = 30000; // 30 —Å–µ–∫—É–Ω–¥
  private heartbeatIntervalMs = 30000; // 30 —Å–µ–∫—É–Ω–¥
  private lastHeartbeat = Date.now();
  private isManualDisconnect = false;

  constructor(
    private serverUrl: string = process.env.NEXT_PUBLIC_API_URL || ""
  ) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤—É–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    if (typeof window !== "undefined") {
      try {
        const audioPath = this.getAudioPath();
        if (audioPath) {
          console.log(`üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ: ${audioPath}`);
          this.newOrderAudio = new Audio(audioPath);
          this.newOrderAudio.preload = "auto";
          this.newOrderAudio.volume = 1.0;
          try {
            this.newOrderAudio.setAttribute("playsinline", "true");
            (this.newOrderAudio as any).webkitPlaysInline = true;
          } catch {}
        } else {
          console.warn(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ"
          );
        }
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:", e);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.setupVisibilityHandlers();
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  private setupVisibilityHandlers(): void {
    if (typeof document === "undefined") return;

    document.addEventListener("visibilitychange", () => {
      if (
        document.visibilityState === "visible" &&
        !this.isConnected &&
        !this.isManualDisconnect
      ) {
        console.log("üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...");
        this.connect();
      }
    });
  }

  // –ó–∞–ø—É—Å–∫ heartbeat
  private startHeartbeat(): void {
    this.stopHeartbeat();
    this.lastHeartbeat = Date.now();

    this.heartbeatInterval = setInterval(() => {
      if (this.socket && this.isConnected) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
        this.socket.emit("ping");
        console.log("üíì Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã pong –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        const timeSinceLastHeartbeat = Date.now() - this.lastHeartbeat;
        if (timeSinceLastHeartbeat > 60000) {
          console.warn("‚ö†Ô∏è Heartbeat timeout, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...");
          this.handleDisconnection();
        }
      }
    }, this.heartbeatIntervalMs);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
  private stopHeartbeat(): void {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  private handleDisconnection(): void {
    this.isConnected = false;
    this.stopHeartbeat();

    if (
      !this.isManualDisconnect &&
      this.reconnectAttempts < this.maxReconnectAttempts
    ) {
      this.scheduleReconnect();
    }
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  private scheduleReconnect(): void {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
    }

    const delay = Math.min(
      this.baseReconnectDelay * Math.pow(2, this.reconnectAttempts),
      this.maxReconnectDelay
    );

    console.log(
      `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${
        this.reconnectAttempts + 1
      }/${this.maxReconnectAttempts})`
    );

    this.reconnectTimeout = setTimeout(() => {
      this.reconnectAttempts++;
      this.connect().catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error);
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
          this.scheduleReconnect();
        } else {
          console.error(
            "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ"
          );
        }
      });
    }, delay);
  }

  // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  private resetReconnectAttempts(): void {
    this.reconnectAttempts = 0;
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–æ–º
  private getSupportedAudioFormat(): string | null {
    if (typeof window === "undefined") return null;

    const audio = document.createElement("audio");

    for (const format of this.audioFormats) {
      if (audio.canPlayType(format.mime) !== "") {
        console.log(`‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: ${format.ext} (${format.mime})`);
        return format.ext;
      }
    }

    console.warn("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º");
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
  private getAudioPath(): string | null {
    const supportedFormat = this.getSupportedAudioFormat();
    if (!supportedFormat) return null;

    const prefixRaw = ((window as any).__NEXT_DATA__?.assetPrefix ||
      (window as any).__NEXT_DATA__?.basePath ||
      process.env.NEXT_PUBLIC_BASE_PATH ||
      "") as string;
    const prefix = prefixRaw.replace(/\/$/, "");

    return `${prefix}/neworder.${supportedFormat}`;
  }

  // –í—ã–∑—ã–≤–∞—Ç—å –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫ –Ω–∞ iOS/Android
  async unlockAudio(): Promise<boolean> {
    if (this.audioUnlocked) return true;
    try {
      if (!this.newOrderAudio && typeof window !== "undefined") {
        const audioPath = this.getAudioPath();
        if (!audioPath) {
          console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç");
          return false;
        }

        console.log(`üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ: ${audioPath}`);
        this.newOrderAudio = new Audio(audioPath);
        this.newOrderAudio.preload = "auto";
        try {
          this.newOrderAudio.setAttribute("playsinline", "true");
          (this.newOrderAudio as any).webkitPlaysInline = true;
        } catch {}
      }
      if (!this.newOrderAudio) return false;
      this.newOrderAudio.muted = true;
      await this.newOrderAudio.play();
      this.newOrderAudio.pause();
      this.newOrderAudio.currentTime = 0;
      this.newOrderAudio.muted = false;
      this.audioUnlocked = true;
      console.log("üîä –ó–≤—É–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
      return true;
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫ (HTMLAudio):", e);
      try {
        const Ctx =
          (window as any)?.AudioContext || (window as any)?.webkitAudioContext;
        if (Ctx) {
          this.audioContext = this.audioContext || new Ctx();
          await (this.audioContext as AudioContext).resume();
          this.audioUnlocked = true;
          console.log("üîä WebAudio —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
          return true;
        }
      } catch (e2) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å WebAudio:", e2);
      }
      return false;
    }
  }

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.isManualDisconnect = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      // Derive origin and socket path from serverUrl
      let origin = this.serverUrl;
      let socketPath = "/socket.io";
      try {
        const parsed = new URL(this.serverUrl);
        origin = `${parsed.protocol}//${parsed.host}`;
        const basePath = parsed.pathname.replace(/\/$/, "");
        socketPath = `${basePath || ""}/socket.io` || "/socket.io";
      } catch (e) {
        console.warn(
          "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NEXT_PUBLIC_API_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å:",
          this.serverUrl
        );
      }

      const namespace = "/orders";
      const namespaceUrl = `${origin}${namespace}`;

      console.log("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket (origin):", origin);
      console.log("üîå Socket.IO path:", socketPath);
      console.log("üîå Namespace:", namespace);
      console.log("üîå –ü–æ–ª–Ω—ã–π URL –¥–ª—è namespace:", namespaceUrl);

      this.socket = io(namespaceUrl, {
        transports: ["websocket"],
        path: socketPath,
        timeout: 20000,
        forceNew: true,
        reconnection: false, // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–µ
        reconnectionAttempts: 0,
        reconnectionDelay: 0,
      });

      this.socket.on("connect", () => {
        this.isConnected = true;
        this.resetReconnectAttempts(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞–∫–∞–∑–æ–≤");
        console.log("üîó Socket ID:", this.socket?.id);
        const transportName = (this.socket as any)?.io?.engine?.transport?.name;
        console.log("üîó Transport:", transportName);

        // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
        this.startHeartbeat();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        this.socket?.emit("get_orders");
        console.log("üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...");

        resolve();
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      this.socket.on("connection_confirmed", (data) => {
        console.log("üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pong –¥–ª—è heartbeat
      this.socket.on("pong", () => {
        this.lastHeartbeat = Date.now();
        console.log("üíì Pong –ø–æ–ª—É—á–µ–Ω");
      });

      this.socket.on("connect_error", (error) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====");
        {
          const errAny = error as any;
          console.error(
            "‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:",
            errAny && "type" in errAny ? errAny.type : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
          );
          console.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:", (error as Error).message);
          console.error(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ:",
            errAny && "description" in errAny
              ? errAny.description
              : "–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
          );
          console.error(
            "‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç:",
            errAny && "context" in errAny ? errAny.context : "–Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
          );
        }
        console.error("‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        console.error("‚ùå URL (origin):", origin);
        console.error("‚ùå Socket.IO path:", socketPath);
        console.error("‚ùå Namespace URL:", namespaceUrl);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò =====");
        reject(error);
      });

      this.socket.on("disconnect", (reason) => {
        console.log("‚ùå ===== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï =====");
        console.log("‚ùå –ü—Ä–∏—á–∏–Ω–∞:", reason);
        console.log("‚ùå ===== –ö–û–ù–ï–¶ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø =====");
        this.handleDisconnection();
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ WebSocket
      this.socket.on("error", (error) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê WEBSOCKET =====");
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå –¢–∏–ø:", typeof error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò WEBSOCKET =====");
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      this.socket.io.on("error", (ioError: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê IO =====");
        console.error("‚ùå IO –û—à–∏–±–∫–∞:", ioError);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò IO =====");
      });

      (this.socket as any).io.engine.on("error", (engineError: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê ENGINE =====");
        console.error("‚ùå Engine –û—à–∏–±–∫–∞:", engineError);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ENGINE =====");
      });
    });
  }

  disconnect(): void {
    this.isManualDisconnect = true;
    this.stopHeartbeat();
    this.resetReconnectAttempts();

    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }

    console.log("üîå –†—É—á–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket");
  }

  updateOrderStatus(orderId: number, status: string): void {
    if (!this.socket) return;
    this.socket.emit("update_order_status", { orderId, status });
  }

  getOrders(): void {
    this.socket?.emit("get_orders");
  }

  onNewOrder(callback: (order: unknown) => void): void {
    if (this.socket) {
      this.socket.on("new_order", (order: unknown) => {
        try {
          console.log("üßæ –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ (new_order):", order);
        } catch {}
        // –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫ —Å fallback
        void this.playNewOrderSound();
        callback(order);
      });
    }
  }

  onOrderStatusUpdate(
    callback: (data: {
      orderId: number;
      status: string;
      updatedBy: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("order_status_updated", callback);
    }
  }

  onOrdersList(callback: (orders: unknown[]) => void): void {
    if (this.socket) {
      this.socket.on("orders_list", (orders: unknown[]) => {
        try {
          const count = Array.isArray(orders) ? orders.length : 0;
          console.log(
            "üì• –ü–æ–ª—É—á–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (orders_list), –∫–æ–ª-–≤–æ:",
            count
          );
          if (Array.isArray(orders)) {
            orders.forEach((order) => {
              console.log("üßæ –ó–∞–∫–∞–∑ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", order);
            });
          } else {
            console.log("üì• orders_list (raw):", orders);
          }
        } catch {}
        callback(orders);
      });
    }
  }

  onConnectionConfirmed(
    callback: (data: {
      message: string;
      clientId: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("connection_confirmed", callback);
    }
  }

  get connected(): boolean {
    return this.isConnected;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  forceReconnect(): Promise<void> {
    console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    this.disconnect();
    return this.connect();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  getConnectionStats(): {
    isConnected: boolean;
    reconnectAttempts: number;
    lastHeartbeat: number;
    isManualDisconnect: boolean;
  } {
    return {
      isConnected: this.isConnected,
      reconnectAttempts: this.reconnectAttempts,
      lastHeartbeat: this.lastHeartbeat,
      isManualDisconnect: this.isManualDisconnect,
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö
  getAudioFormatInfo(): {
    supportedFormat: string | null;
    audioPath: string | null;
    allFormats: Array<{ ext: string; mime: string; supported: boolean }>;
  } {
    const supportedFormat = this.getSupportedAudioFormat();
    const audioPath = this.getAudioPath();

    const allFormats = this.audioFormats.map((format) => ({
      ext: format.ext,
      mime: format.mime,
      supported:
        typeof window !== "undefined" &&
        document.createElement("audio").canPlayType(format.mime) !== "",
    }));

    return {
      supportedFormat,
      audioPath,
      allFormats,
    };
  }

  // –†—É—á–Ω–æ–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ —Å fallback
  async playNewOrderSound(): Promise<boolean> {
    try {
      if (typeof window !== "undefined" && !this.newOrderAudio) {
        const audioPath = this.getAudioPath();
        if (!audioPath) {
          console.warn(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
          );
          return false;
        }

        console.log(`üîä –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${audioPath}`);
        this.newOrderAudio = new Audio(audioPath);
        this.newOrderAudio.preload = "auto";
        try {
          this.newOrderAudio.setAttribute("playsinline", "true");
          (this.newOrderAudio as any).webkitPlaysInline = true;
        } catch {}
      }
      if (this.newOrderAudio) {
        this.newOrderAudio.currentTime = 0;
        await this.newOrderAudio.play();
        return true;
      }
    } catch (e) {
      console.warn(
        "‚ö†Ô∏è –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ mp3 –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º WebAudio fallback:",
        e
      );
    }

    try {
      const Ctx =
        (window as any)?.AudioContext || (window as any)?.webkitAudioContext;
      if (!Ctx) return false;
      this.audioContext = this.audioContext || new Ctx();
      await (this.audioContext as AudioContext).resume();

      const durationSec = 0.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const ctx = this.audioContext as AudioContext;
      const oscillator = ctx.createOscillator();
      const gainNode = ctx.createGain();
      oscillator.type = "sine";
      oscillator.frequency.value = 880;

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å fallback –∑–≤—É–∫–∞
      gainNode.gain.value = 0.1; // –ù–∞—á–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—à–µ
      oscillator.connect(gainNode);
      gainNode.connect(ctx.destination);

      const now = ctx.currentTime;

      // –ë–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π –∑–≤—É–∫ —Å —Ä–µ–∑–∫–∏–º –Ω–∞—á–∞–ª–æ–º –∏ –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
      gainNode.gain.setValueAtTime(0.1, now);
      gainNode.gain.exponentialRampToValueAtTime(0.8, now + 0.05); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
      gainNode.gain.exponentialRampToValueAtTime(0.1, now + durationSec);

      oscillator.start(now);
      oscillator.stop(now + durationSec);

      console.log("üîä WebAudio fallback –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω (–≥—Ä–æ–º–∫–∏–π)");
      return true;
    } catch (e2) {
      console.warn("‚ö†Ô∏è WebAudio fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:", e2);
      return false;
    }
  }
}
