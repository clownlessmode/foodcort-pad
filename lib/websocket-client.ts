import { io, Socket } from "socket.io-client";

export class OrdersWebSocketClient {
  private socket: Socket | null = null;
  private isConnected = false;
  private newOrderAudio: HTMLAudioElement | null = null;
  private audioUnlocked = false;

  constructor(
    private serverUrl: string = process.env.NEXT_PUBLIC_API_URL || ""
  ) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–≤—É–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    if (typeof window !== "undefined") {
      try {
        const base = (process.env.NEXT_PUBLIC_BASE_PATH || "").replace(
          /\/$/,
          ""
        );
        const audioPath = `${base}/neworder.mp3`;
        this.newOrderAudio = new Audio(audioPath);
        this.newOrderAudio.preload = "auto";
        this.newOrderAudio.volume = 1.0;
        try {
          this.newOrderAudio.setAttribute("playsinline", "true");
          (this.newOrderAudio as any).webkitPlaysInline = true;
        } catch {}
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:", e);
      }
    }
  }

  // –í—ã–∑—ã–≤–∞—Ç—å –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫ –Ω–∞ iOS/Android
  async unlockAudio(): Promise<void> {
    if (!this.newOrderAudio) return;
    if (this.audioUnlocked) return;
    try {
      this.newOrderAudio.muted = true;
      await this.newOrderAudio.play();
      this.newOrderAudio.pause();
      this.newOrderAudio.currentTime = 0;
      this.newOrderAudio.muted = false;
      this.audioUnlocked = true;
      console.log("üîä –ó–≤—É–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–≤—É–∫:", e);
    }
  }

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      // Derive origin and socket path from serverUrl
      let origin = this.serverUrl;
      let socketPath = "/socket.io";
      try {
        const parsed = new URL(this.serverUrl);
        origin = `${parsed.protocol}//${parsed.host}`;
        const basePath = parsed.pathname.replace(/\/$/, "");
        socketPath = `${basePath || ""}/socket.io` || "/socket.io";
      } catch (e) {
        console.warn(
          "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π NEXT_PUBLIC_API_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å:",
          this.serverUrl
        );
      }

      const namespace = "/orders";
      const namespaceUrl = `${origin}${namespace}`;

      console.log("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket (origin):", origin);
      console.log("üîå Socket.IO path:", socketPath);
      console.log("üîå Namespace:", namespace);
      console.log("üîå –ü–æ–ª–Ω—ã–π URL –¥–ª—è namespace:", namespaceUrl);

      this.socket = io(namespaceUrl, {
        transports: ["websocket"],
        path: socketPath,
        timeout: 20000,
        forceNew: true,
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 1000,
      });

      this.socket.on("connect", () => {
        this.isConnected = true;
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞–∫–∞–∑–æ–≤");
        console.log("üîó Socket ID:", this.socket?.id);
        const transportName = (this.socket as any)?.io?.engine?.transport?.name;
        console.log("üîó Transport:", transportName);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        this.socket?.emit("get_orders");
        console.log("üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...");

        resolve();
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      this.socket.on("connection_confirmed", (data) => {
        console.log("üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
      });

      this.socket.on("connect_error", (error) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====");
        {
          const errAny = error as any;
          console.error(
            "‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:",
            errAny && "type" in errAny ? errAny.type : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
          );
          console.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:", (error as Error).message);
          console.error(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ:",
            errAny && "description" in errAny
              ? errAny.description
              : "–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
          );
          console.error(
            "‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç:",
            errAny && "context" in errAny ? errAny.context : "–Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
          );
        }
        console.error("‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        console.error("‚ùå URL (origin):", origin);
        console.error("‚ùå Socket.IO path:", socketPath);
        console.error("‚ùå Namespace URL:", namespaceUrl);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò =====");
        reject(error);
      });

      this.socket.on("disconnect", (reason) => {
        this.isConnected = false;
        console.log("‚ùå ===== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï =====");
        console.log("‚ùå –ü—Ä–∏—á–∏–Ω–∞:", reason);
        console.log("‚ùå ===== –ö–û–ù–ï–¶ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø =====");
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ WebSocket
      this.socket.on("error", (error) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê WEBSOCKET =====");
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        console.error("‚ùå –¢–∏–ø:", typeof error);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò WEBSOCKET =====");
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      this.socket.io.on("error", (ioError: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê IO =====");
        console.error("‚ùå IO –û—à–∏–±–∫–∞:", ioError);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò IO =====");
      });

      (this.socket as any).io.engine.on("error", (engineError: unknown) => {
        console.error("‚ùå ===== –û–®–ò–ë–ö–ê ENGINE =====");
        console.error("‚ùå Engine –û—à–∏–±–∫–∞:", engineError);
        console.error("‚ùå ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò ENGINE =====");
      });
    });
  }

  disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }

  updateOrderStatus(orderId: number, status: string): void {
    if (!this.socket) return;
    this.socket.emit("update_order_status", { orderId, status });
  }

  getOrders(): void {
    this.socket?.emit("get_orders");
  }

  onNewOrder(callback: (order: unknown) => void): void {
    if (this.socket) {
      this.socket.on("new_order", (order: unknown) => {
        try {
          console.log("üßæ –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ (new_order):", order);
        } catch {}
        // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        try {
          if (this.newOrderAudio) {
            this.newOrderAudio.currentTime = 0;
            // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const p = this.newOrderAudio.play();
            if (p && typeof p.catch === "function") {
              p.catch(() => {
                // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ-–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
              });
            }
          }
        } catch {}
        callback(order);
      });
    }
  }

  onOrderStatusUpdate(
    callback: (data: {
      orderId: number;
      status: string;
      updatedBy: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("order_status_updated", callback);
    }
  }

  onOrdersList(callback: (orders: unknown[]) => void): void {
    if (this.socket) {
      this.socket.on("orders_list", (orders: unknown[]) => {
        try {
          const count = Array.isArray(orders) ? orders.length : 0;
          console.log(
            "üì• –ü–æ–ª—É—á–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (orders_list), –∫–æ–ª-–≤–æ:",
            count
          );
          if (Array.isArray(orders)) {
            orders.forEach((order) => {
              console.log("üßæ –ó–∞–∫–∞–∑ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", order);
            });
          } else {
            console.log("üì• orders_list (raw):", orders);
          }
        } catch {}
        callback(orders);
      });
    }
  }

  onConnectionConfirmed(
    callback: (data: {
      message: string;
      clientId: string;
      timestamp: string;
    }) => void
  ): void {
    if (this.socket) {
      this.socket.on("connection_confirmed", callback);
    }
  }

  get connected(): boolean {
    return this.isConnected;
  }

  // –†—É—á–Ω–æ–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏)
  playNewOrderSound(): void {
    try {
      if (!this.newOrderAudio) return;
      this.newOrderAudio.currentTime = 0;
      const p = this.newOrderAudio.play();
      if (p && typeof p.catch === "function") {
        p.catch(() => {});
      }
    } catch {}
  }
}
